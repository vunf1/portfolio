name: Component System Validation

on:
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/components/**'
      - 'src/css/**'
      - 'src/types/**'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:

jobs:
  validate-components:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate TypeScript interfaces
        run: |
          echo "🔍 Validating TypeScript interfaces..."
          npm run type-check
          echo "✅ TypeScript validation passed"
        
      - name: Validate component structure
        run: |
          echo "🎨 Validating Component Structure:"
          echo "================================="
          echo ""
          
          # Check UI components
          if [ -d "src/components/ui" ]; then
            echo "📁 UI Components:"
            ls -la src/components/ui/
            echo ""
          else
            echo "❌ UI components directory missing"
            exit 1
          fi
          
          # Check design system files
          if [ -f "src/css/tokens.css" ]; then
            echo "✅ Design tokens present"
          else
            echo "❌ Design tokens missing"
            exit 1
          fi
          
          if [ -f "src/css/components.css" ]; then
            echo "✅ Component CSS present"
          else
            echo "❌ Component CSS missing"
            exit 1
          fi
          
          # Check type definitions
          if [ -f "src/types/components.ts" ]; then
            echo "✅ Component types present"
          else
            echo "❌ Component types missing"
            exit 1
          fi
          
          echo ""
          echo "🎉 Component structure validation passed!"
        
      - name: Lint UI components
        run: npm run lint:ui
        
      - name: Lint main components
        run: npm run lint:components
        
      - name: Build component system
        run: npm run build:components
        
      - name: Analyze component bundle
        run: |
          echo "📊 Component Bundle Analysis:"
          echo "============================="
          echo ""
          
          if [ -d "dist" ]; then
            echo "📁 Build output:"
            ls -la dist/
            echo ""
            echo "📦 Assets:"
            ls -la dist/assets/ 2>/dev/null || echo "No assets folder"
            echo ""
            echo "📊 Bundle size:"
            du -sh dist/
          else
            echo "❌ Build output not found"
            exit 1
          fi
        
      - name: Comment PR with component analysis
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let analysis = '## 🎨 Component System Validation\n\n';
            
            // Count components
            const uiComponents = fs.existsSync('src/components/ui') ? 
              fs.readdirSync('src/components/ui').filter(f => f.endsWith('.tsx')).length : 0;
            const mainComponents = fs.existsSync('src/components') ? 
              fs.readdirSync('src/components').filter(f => f.endsWith('.tsx') && !f.includes('ui')).length : 0;
            
            // Check design system files
            const hasTokens = fs.existsSync('src/css/tokens.css');
            const hasComponentCSS = fs.existsSync('src/css/components.css');
            const hasTypes = fs.existsSync('src/types/components.ts');
            
            // Check build output
            const hasBuild = fs.existsSync('dist');
            let buildSize = 'N/A';
            if (hasBuild) {
              try {
                const stats = fs.statSync('dist');
                buildSize = Math.round(stats.size / 1024) + ' KB';
              } catch (e) {
                buildSize = 'Unknown';
              }
            }
            
            analysis += `✅ **TypeScript Validation**: Passed\n`;
            analysis += `✅ **Component Structure**: Valid\n`;
            analysis += `✅ **UI Components**: ${uiComponents} components\n`;
            analysis += `✅ **Main Components**: ${mainComponents} components\n`;
            analysis += `✅ **Design Tokens**: ${hasTokens ? 'Present' : 'Missing'}\n`;
            analysis += `✅ **Component CSS**: ${hasComponentCSS ? 'Present' : 'Missing'}\n`;
            analysis += `✅ **Type Definitions**: ${hasTypes ? 'Present' : 'Missing'}\n`;
            analysis += `✅ **Build Output**: ${hasBuild ? 'Generated' : 'Failed'}\n`;
            analysis += `📊 **Build Size**: ${buildSize}\n\n`;
            
            analysis += `🎯 **Component System Status**: `;
            if (hasTokens && hasComponentCSS && hasTypes && hasBuild) {
              analysis += `🟢 **Fully Operational**\n`;
            } else if (hasTokens || hasComponentCSS || hasTypes) {
              analysis += `🟡 **Partially Implemented**\n`;
            } else {
              analysis += `🔴 **Not Implemented**\n`;
            }
            
            analysis += `\n---\n*Auto-generated by GitHub Actions*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: analysis
            });


